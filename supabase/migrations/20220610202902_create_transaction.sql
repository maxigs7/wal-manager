-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Type: transactionType

-- DROP TYPE IF EXISTS public."transactionType";

CREATE TYPE public."transactionType" AS ENUM
    ('expenses', 'incomes', 'transfer');

ALTER TYPE public."transactionType"
    OWNER TO postgres;

CREATE TABLE IF NOT EXISTS public.transaction
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    type "transactionType" NOT NULL,
    "accountId" uuid NOT NULL,
    "categoryId" uuid NOT NULL,
    amount numeric(11,4) NOT NULL,
    date timestamp without time zone,
    "billedDate" timestamp without time zone,
    description character varying(100) COLLATE pg_catalog."default",
    "creditCardId" uuid,
    "feeNumber" smallint,
    "isRecurring" boolean NOT NULL DEFAULT false,
    "isPaid" boolean NOT NULL DEFAULT false,
    "parentTransactionId" uuid,
    "createdAt" timestamp without time zone NOT NULL DEFAULT now(),
    "userId" uuid NOT NULL,
    CONSTRAINT transaction_pkey PRIMARY KEY (id),
    CONSTRAINT fk_transaction_account FOREIGN KEY ("accountId")
        REFERENCES public.account (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_transaction_category FOREIGN KEY ("categoryId")
        REFERENCES public.category (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "fk_transaction_creditCard" FOREIGN KEY ("creditCardId")
        REFERENCES public."creditCard" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_transaction_parent FOREIGN KEY ("parentTransactionId")
        REFERENCES public.transaction (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_transaction_user FOREIGN KEY ("userId")
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.transaction
    OWNER to postgres;

ALTER TABLE IF EXISTS public.transaction
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.transaction TO anon;

GRANT ALL ON TABLE public.transaction TO authenticated;

GRANT ALL ON TABLE public.transaction TO postgres;

GRANT ALL ON TABLE public.transaction TO service_role;
CREATE POLICY "Users can delete their own transactions."
    ON public.transaction
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can insert their own transactions."
    ON public.transaction
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Users can update their own transactions."
    ON public.transaction
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can view their own transactions."
    ON public.transaction
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = "userId"));


