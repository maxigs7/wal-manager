-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public."creditCard"
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    type "creditCardType" NOT NULL,
    "accountId" uuid,
    "createdAt" timestamp without time zone NOT NULL DEFAULT now(),
    "userId" uuid NOT NULL,
    CONSTRAINT "creditCard_pkey" PRIMARY KEY (id),
    CONSTRAINT "fk_creditCard_account" FOREIGN KEY ("accountId")
        REFERENCES public.account (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "fk_creditCard_user" FOREIGN KEY ("userId")
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."creditCard"
    OWNER to postgres;

ALTER TABLE IF EXISTS public."creditCard"
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public."creditCard" TO anon;

GRANT ALL ON TABLE public."creditCard" TO authenticated;

GRANT ALL ON TABLE public."creditCard" TO postgres;

GRANT ALL ON TABLE public."creditCard" TO service_role;
CREATE POLICY "Users can delete their own creditCards."
    ON public."creditCard"
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can insert their own creditCards."
    ON public."creditCard"
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Users can update their own creditCards."
    ON public."creditCard"
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can view their own creditCards."
    ON public."creditCard"
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = "userId"));
