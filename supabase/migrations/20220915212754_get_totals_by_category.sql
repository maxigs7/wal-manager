-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE OR REPLACE FUNCTION public.get_totals_by_category(
	"startDate" timestamp without time zone,
	"endDate" timestamp without time zone)
    RETURNS TABLE(type "transactionType", "rootCategoryId" uuid, "rootCategory" character varying, "rootCategoryColor" character varying, "rootCategoryIcon" character varying, "subCategoryId" uuid, "subCategory" character varying, amount numeric, total numeric)
    LANGUAGE 'sql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

with categories as (
  select
    coalesce("parentCat".id, cat.id) as "rootCategoryId",
    coalesce("parentCat".name, cat.name) as "rootCategory",
    coalesce("parentCat".color, cat.color) as "rootCategoryColor",
    coalesce("parentCat".icon, cat.icon) as "rootCategoryIcon",
    case when "parentCat".id is null then null else cat.id end as "subCategoryId",
    case when "parentCat".id is null then null else cat.name end as "subCategory"
  from category as cat
    left join category as "parentCat"
      on cat."parentId" = "parentCat".id
)
select
  t.type,
  c."rootCategoryId",
  c."rootCategory",
  c."rootCategoryColor",
  c."rootCategoryIcon",
  null as "subCategoryId",
  null as "subCategory",
  sum(case when t."categoryId" = c."rootCategoryId" then t.amount else 0 end) as amount,
  sum(t.amount) as total
from categories as c
  inner join transaction as t
    on (c."subCategoryId" is null and t."categoryId" = c."rootCategoryId")
    or t."categoryId" = c."subCategoryId"
  left join public.get_ocurrences(t.id) as o
    on o.id = t.id and o.date >= "startDate" and o.date <= "endDate"
where coalesce(o.date, t.date) >= "startDate"
  and coalesce(o.date, t.date) <= "endDate"
group by
  t.type,
  c."rootCategoryId",
  c."rootCategory",
  c."rootCategoryColor",
  c."rootCategoryIcon"
having sum(t.amount) > 0

union all

select
  t.type,
  c."rootCategoryId",
  c."rootCategory",
  c."rootCategoryColor",
  c."rootCategoryIcon",
  c."subCategoryId",
  c."subCategory",
  sum(t.amount) as amount,
  sum(t.amount) as total
from categories as c
  inner join transaction as t
    on t."categoryId" = c."subCategoryId"
  left join public.get_ocurrences(t.id) as o
    on o.id = t.id and o.date >= "startDate" and o.date <= "endDate"
where coalesce(o.date, t.date) >= "startDate"
  and coalesce(o.date, t.date) <= "endDate"
group by
  t.type,
  c."rootCategoryId",
  c."rootCategory",
  c."rootCategoryColor",
  c."rootCategoryIcon",
  c."subCategoryId",
  c."subCategory"
having sum(t.amount) > 0

$BODY$;

ALTER FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone)
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone) TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone) TO anon;

GRANT EXECUTE ON FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone) TO authenticated;

GRANT EXECUTE ON FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone) TO postgres;

GRANT EXECUTE ON FUNCTION public.get_totals_by_category(timestamp without time zone, timestamp without time zone) TO service_role;
