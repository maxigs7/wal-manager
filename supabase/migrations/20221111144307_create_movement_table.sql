-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.movement
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    type "movementType" NOT NULL,
    description character varying(100) COLLATE pg_catalog."default",
    amount numeric(11,4) NOT NULL,
    "accountId" uuid NOT NULL,
    "categoryId" uuid NOT NULL,
    "creditCardId" uuid,
    "investmentId" uuid,
    month smallint NOT NULL,
    year smallint NOT NULL,
    date timestamp without time zone NOT NULL,
    "isPaid" boolean NOT NULL DEFAULT false,
    "createdAt" timestamp without time zone NOT NULL DEFAULT now(),
    "userId" uuid NOT NULL,
    CONSTRAINT movement_pkey PRIMARY KEY (id),
    CONSTRAINT fk_movement_account FOREIGN KEY ("accountId")
        REFERENCES public.account (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_movement_category FOREIGN KEY ("categoryId")
        REFERENCES public.category (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT "fk_movement_creditCard" FOREIGN KEY ("creditCardId")
        REFERENCES public."creditCard" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_movement_investment FOREIGN KEY ("investmentId")
        REFERENCES public.investment (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fk_movement_user FOREIGN KEY ("userId")
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.movement
    OWNER to postgres;

ALTER TABLE IF EXISTS public.movement
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.movement TO authenticated;

GRANT ALL ON TABLE public.movement TO anon;

GRANT ALL ON TABLE public.movement TO service_role;

GRANT ALL ON TABLE public.movement TO postgres;
CREATE POLICY "Users can delete their own movements."
    ON public.movement
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can insert their own movements."
    ON public.movement
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Users can update their own movements."
    ON public.movement
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can view their own movements."
    ON public.movement
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = "userId"));
