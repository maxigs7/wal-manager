-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.account
(
    id uuid NOT NULL DEFAULT uuid_generate_v4(),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    type "accountType" NOT NULL,
    "createdAt" timestamp without time zone NOT NULL DEFAULT now(),
    "archivedAt" timestamp without time zone,
    "userId" uuid NOT NULL,
    "isDefault" boolean NOT NULL DEFAULT false,
    CONSTRAINT account_pkey PRIMARY KEY (id),
    CONSTRAINT fk_account_user FOREIGN KEY ("userId")
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.account
    OWNER to postgres;

ALTER TABLE IF EXISTS public.account
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.account TO anon;

GRANT ALL ON TABLE public.account TO authenticated;

GRANT ALL ON TABLE public.account TO postgres;

GRANT ALL ON TABLE public.account TO service_role;
CREATE POLICY "Users can delete their own accounts."
    ON public.account
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can insert their own accounts."
    ON public.account
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.role() = 'authenticated'::text));
CREATE POLICY "Users can update their own accounts."
    ON public.account
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = "userId"));
CREATE POLICY "Users can view their own accounts."
    ON public.account
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = "userId"));
